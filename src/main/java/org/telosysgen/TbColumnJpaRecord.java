/*
 * Created on 2020-02-12 ( Date ISO 2020-02-12 - Time 22:12:27 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.1.2
 */

package org.telosysgen;

import java.io.Serializable;

import javax.persistence.*;

/**
 * Persistent class for "TbColumn" entity stored in table "TB_COLUMN" <br>
 * This class is a "record entity" without JPA links <br>
 *
 * @author Telosys
 *
 */
@Entity
@Table(name = "TB_COLUMN")
// Define named queries here
@NamedQueries({ @NamedQuery(name = "TbColumnJpaRecord.countAll", query = "SELECT COUNT(x) FROM TbColumnJpaRecord x"),
		@NamedQuery(name = "TbColumnJpaRecord.countById", query = "SELECT COUNT(x) FROM TbColumnJpaRecord x WHERE x.idColumn = ?1 ") })
public class TbColumnJpaRecord implements Serializable {

	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------
	// ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
	// ----------------------------------------------------------------------
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "SEQ_COLUMN")
	@Column(name = "ID_COLUMN", nullable = false)
	private Long idColumn;

	// ----------------------------------------------------------------------
	// ENTITY DATA FIELDS
	// ----------------------------------------------------------------------
	@Column(name = "DB_COMMENT", length = 100)
	private String dbComment;

	@Column(name = "DB_DEFAULT_VALUE", length = 100)
	private String dbDefaultValue;

	@Column(name = "DB_NAME", length = 100)
	private String dbName;

	@Column(name = "DB_NOT_NULL", length = 100)
	private String dbNotNull;

	@Column(name = "DB_POSITION", length = 100)
	private String dbPosition;

	@Column(name = "DB_PRIMARY_KEY", length = 100)
	private String dbPrimaryKey;

	@Column(name = "DB_SIZE", length = 100)
	private String dbSize;

	@Column(name = "DB_TYPE_NAME", length = 100)
	private String dbTypeName;

	@Column(name = "INPUT_TYPE", length = 100)
	private String inputType;

	@Column(name = "JAVA_NAME", length = 100)
	private String javaName;

	@Column(name = "JAVA_TYPE", length = 100)
	private String javaType;

	@Column(name = "JDBC_TYPE_CODE", length = 100)
	private String jdbcTypeCode;

	@Column(name = "LABEL", length = 100)
	private String label;

	@Column(name = "NOT_NULL", length = 100)
	private String notNull;

	@Column(name = "SELECTED", length = 100)
	private String selected;

	@Column(name = "DB_AUTOINCREMENTED", length = 100)
	private String dbAutoIncremented;

	@Column(name = "MAX_LENGTH", length = 100)
	private String maxLength;

	@ManyToOne(cascade = { CascadeType.MERGE, CascadeType.PERSIST })
	@JoinColumn(name = "ID_TABLE", referencedColumnName = "ID_TABLE", foreignKey = @ForeignKey(name = "FK_COLUMN_TABLE"))
	private TbTableJpaRecord table;

	// ----------------------------------------------------------------------
	// CONSTRUCTOR(S)
	// ----------------------------------------------------------------------
	public TbColumnJpaRecord() {
		super();
	}

	// ----------------------------------------------------------------------
	// GETTER & SETTER FOR THE KEY FIELD
	// ----------------------------------------------------------------------
	public void setIdColumn(Long idColumn) {
		this.idColumn = idColumn;
	}

	public Long getIdColumn() {
		return this.idColumn;
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR FIELDS
	// ----------------------------------------------------------------------
	// --- DATABASE MAPPING : DB_COMMENT ( VARCHAR )
	public void setDbComment(String dbComment) {
		this.dbComment = dbComment;
	}

	public String getDbComment() {
		return this.dbComment;
	}

	// --- DATABASE MAPPING : DB_DEFAULT_VALUE ( VARCHAR )
	public void setDbDefaultValue(String dbDefaultValue) {
		this.dbDefaultValue = dbDefaultValue;
	}

	public String getDbDefaultValue() {
		return this.dbDefaultValue;
	}

	// --- DATABASE MAPPING : DB_NAME ( VARCHAR )
	public void setDbName(String dbName) {
		this.dbName = dbName;
	}

	public String getDbName() {
		return this.dbName;
	}

	// --- DATABASE MAPPING : DB_NOT_NULL ( VARCHAR )
	public void setDbNotNull(String dbNotNull) {
		this.dbNotNull = dbNotNull;
	}

	public String getDbNotNull() {
		return this.dbNotNull;
	}

	// --- DATABASE MAPPING : DB_POSITION ( VARCHAR )
	public void setDbPosition(String dbPosition) {
		this.dbPosition = dbPosition;
	}

	public String getDbPosition() {
		return this.dbPosition;
	}

	// --- DATABASE MAPPING : DB_PRIMARY_KEY ( VARCHAR )
	public void setDbPrimaryKey(String dbPrimaryKey) {
		this.dbPrimaryKey = dbPrimaryKey;
	}

	public String getDbPrimaryKey() {
		return this.dbPrimaryKey;
	}

	// --- DATABASE MAPPING : DB_SIZE ( VARCHAR )
	public void setDbSize(String dbSize) {
		this.dbSize = dbSize;
	}

	public String getDbSize() {
		return this.dbSize;
	}

	// --- DATABASE MAPPING : DB_TYPE_NAME ( VARCHAR )
	public void setDbTypeName(String dbTypeName) {
		this.dbTypeName = dbTypeName;
	}

	public String getDbTypeName() {
		return this.dbTypeName;
	}

	// --- DATABASE MAPPING : INPUT_TYPE ( VARCHAR )
	public void setInputType(String inputType) {
		this.inputType = inputType;
	}

	public String getInputType() {
		return this.inputType;
	}

	// --- DATABASE MAPPING : JAVA_NAME ( VARCHAR )
	public void setJavaName(String javaName) {
		this.javaName = javaName;
	}

	public String getJavaName() {
		return this.javaName;
	}

	// --- DATABASE MAPPING : JAVA_TYPE ( VARCHAR )
	public void setJavaType(String javaType) {
		this.javaType = javaType;
	}

	public String getJavaType() {
		return this.javaType;
	}

	// --- DATABASE MAPPING : JDBC_TYPE_CODE ( VARCHAR )
	public void setJdbcTypeCode(String jdbcTypeCode) {
		this.jdbcTypeCode = jdbcTypeCode;
	}

	public String getJdbcTypeCode() {
		return this.jdbcTypeCode;
	}

	// --- DATABASE MAPPING : LABEL ( VARCHAR )
	public void setLabel(String label) {
		this.label = label;
	}

	public String getLabel() {
		return this.label;
	}

	// --- DATABASE MAPPING : NOT_NULL ( VARCHAR )
	public void setNotNull(String notNull) {
		this.notNull = notNull;
	}

	public String getNotNull() {
		return this.notNull;
	}

	// --- DATABASE MAPPING : SELECTED ( VARCHAR )
	public void setSelected(String selected) {
		this.selected = selected;
	}

	public String getSelected() {
		return this.selected;
	}

	public TbTableJpaRecord getTable() {
		return table;
	}

	public void setTable(TbTableJpaRecord table) {
		this.table = table;
	}

	public void setId(Long id) {
		this.idColumn = id;
	}

	public Long getId() {
		return this.idColumn;
	}

	public String getDbAutoIncremented() {
		return dbAutoIncremented;
	}

	public void setDbAutoIncremented(String dbAutoIncremented) {
		this.dbAutoIncremented = dbAutoIncremented;
	}

	public String getMaxLength() {
		return maxLength;
	}

	public void setMaxLength(String maxLength) {
		this.maxLength = maxLength;
	}

	// ----------------------------------------------------------------------
	// toString METHOD
	// ----------------------------------------------------------------------
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("[");
		sb.append(idColumn);
		sb.append("]:");
		sb.append(dbComment);
		sb.append("|");
		sb.append(dbDefaultValue);
		sb.append("|");
		sb.append(dbName);
		sb.append("|");
		sb.append(dbNotNull);
		sb.append("|");
		sb.append(dbPosition);
		sb.append("|");
		sb.append(dbPrimaryKey);
		sb.append("|");
		sb.append(dbSize);
		sb.append("|");
		sb.append(dbTypeName);
		sb.append("|");
		sb.append(inputType);
		sb.append("|");
		sb.append(javaName);
		sb.append("|");
		sb.append(javaType);
		sb.append("|");
		sb.append(jdbcTypeCode);
		sb.append("|");
		sb.append(label);
		sb.append("|");
		sb.append(notNull);
		sb.append("|");
		sb.append(selected);
		return sb.toString();
	}

}
